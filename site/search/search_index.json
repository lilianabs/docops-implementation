{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tutorial In this tutorial we describe an implementation of Docs as Code. First, we define what Docs as Code is and describe the process that we follow to develop documentation. Then, we list the tools that we use and we go through the process of configuring each one of them for this implementation. What is Docs as Code? Docs as Code is treating documentation as a software product. We use the same tools that are used in software development\u2014IDE, Git, and CI/CD\u2014to write and publish a project's documentation. Also, we use the same tools that software developers use. As a result, we deliver the documentation in the same way we deliver software. Tools There are several tools that we can use to implement docs as code. For this implementation, we use the following tools: Markdown: Create our documents as plain text files and use a Markup language. VS Code: Use an IDE to edit our documents. Mkdocs: Use a static site generator. GitHub: Use Git for file management and collaboration. HTMLProofer and Vale: Test our documentation. We check for missing links and use a prose linter. GitHub Actions: Build and publish the documentation site continuously. We automatically deploy our documentation site after every commit we make. How is the Process of Docs as Code? To deliver documentation as code, we follow a similar process as software development. The following image shows the workflow of the implementation of Docs as Code: Create the documents in Markdown . We create our documentation using a Markup language. Create a static site with the Markdown files . We use Mkdocs to create our documentation site. Push the Markdown files to GitHub . We use GitHub to control the versions of our documentation site. Test the documents . We create a continuous integration workflow to build and test the HTML files of our documentation site. Deploy the static site . We create a continuous deployment workflow to deploy our documentation site to Netlify. How we Implement Docs as Code We need to set up and configure the tools mentioned in section Tools so that we can start creating documentation. In this tutorial we go throught the following steps to create our implementation: Step 1: Create the Static Site. Step 2: Create a GitHub repository. Step 3: Add the Vale YAML Extension files. Step 4: Create the continuous integration workflow. Step 5: Create the continuous deployment workflow.","title":"Home"},{"location":"#tutorial","text":"In this tutorial we describe an implementation of Docs as Code. First, we define what Docs as Code is and describe the process that we follow to develop documentation. Then, we list the tools that we use and we go through the process of configuring each one of them for this implementation.","title":"Tutorial"},{"location":"#what-is-docs-as-code","text":"Docs as Code is treating documentation as a software product. We use the same tools that are used in software development\u2014IDE, Git, and CI/CD\u2014to write and publish a project's documentation. Also, we use the same tools that software developers use. As a result, we deliver the documentation in the same way we deliver software.","title":"What is Docs as Code?"},{"location":"#tools","text":"There are several tools that we can use to implement docs as code. For this implementation, we use the following tools: Markdown: Create our documents as plain text files and use a Markup language. VS Code: Use an IDE to edit our documents. Mkdocs: Use a static site generator. GitHub: Use Git for file management and collaboration. HTMLProofer and Vale: Test our documentation. We check for missing links and use a prose linter. GitHub Actions: Build and publish the documentation site continuously. We automatically deploy our documentation site after every commit we make.","title":"Tools"},{"location":"#how-is-the-process-of-docs-as-code","text":"To deliver documentation as code, we follow a similar process as software development. The following image shows the workflow of the implementation of Docs as Code: Create the documents in Markdown . We create our documentation using a Markup language. Create a static site with the Markdown files . We use Mkdocs to create our documentation site. Push the Markdown files to GitHub . We use GitHub to control the versions of our documentation site. Test the documents . We create a continuous integration workflow to build and test the HTML files of our documentation site. Deploy the static site . We create a continuous deployment workflow to deploy our documentation site to Netlify.","title":"How is the Process of Docs as Code?"},{"location":"#how-we-implement-docs-as-code","text":"We need to set up and configure the tools mentioned in section Tools so that we can start creating documentation. In this tutorial we go throught the following steps to create our implementation: Step 1: Create the Static Site. Step 2: Create a GitHub repository. Step 3: Add the Vale YAML Extension files. Step 4: Create the continuous integration workflow. Step 5: Create the continuous deployment workflow.","title":"How we Implement Docs as Code"},{"location":"step1/","text":"We need to install a Static Site Generator (SSG) to create our documentation site. For this implementation of Docs as Code, we'll be using Mkdocs because it is very simple and enables us to customize the documentation site using a theme. Prerequisites Before we create our Mkdocs static site, we need to install Python 3 so that we can use the pip command to install Mkdocs, and the Mkdocs Material theme. After installing (or verifying that you have) Python 3 on your local system, execute the following commands: Install Mkdocs: pip install mkdocs Install the Mkdocs Material theme: pip install mkdocs-material Create the documentation site We can now create our documentation site: In the terminal, change the current working directory to the location where we want to store the repository\u2019s contents using the change directory (cd) command. Create the Static Site Mkdocs project: mkdocs new documentation-site-name Mkdocs creates the directory documentation-site-name with the following contents: . \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 mkdocs.yml You can preview the documentation site on your local system with the command mkdocs serve . Add the Material theme to the documentation site We add the material theme to our documentation site: Open the mkdocs.yml configuration file. In this file, enter the following settings: site_name: 'Name of your documentation site' theme: theme: name: material logo: images/typewriter.png palette: primary: white accent: white font: text: 'Roboto' code: 'Roboto Mono' nav: - Home: index.md The settings above are the configuration of this documentation site. However, we can do more customizations to the Material theme so that we can add our own css file and override the HTML code that Mkdocs creates.","title":"Step 1 Create the Static Site"},{"location":"step1/#prerequisites","text":"Before we create our Mkdocs static site, we need to install Python 3 so that we can use the pip command to install Mkdocs, and the Mkdocs Material theme. After installing (or verifying that you have) Python 3 on your local system, execute the following commands: Install Mkdocs: pip install mkdocs Install the Mkdocs Material theme: pip install mkdocs-material","title":"Prerequisites"},{"location":"step1/#create-the-documentation-site","text":"We can now create our documentation site: In the terminal, change the current working directory to the location where we want to store the repository\u2019s contents using the change directory (cd) command. Create the Static Site Mkdocs project: mkdocs new documentation-site-name Mkdocs creates the directory documentation-site-name with the following contents: . \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 mkdocs.yml You can preview the documentation site on your local system with the command mkdocs serve .","title":"Create the documentation site"},{"location":"step1/#add-the-material-theme-to-the-documentation-site","text":"We add the material theme to our documentation site: Open the mkdocs.yml configuration file. In this file, enter the following settings: site_name: 'Name of your documentation site' theme: theme: name: material logo: images/typewriter.png palette: primary: white accent: white font: text: 'Roboto' code: 'Roboto Mono' nav: - Home: index.md The settings above are the configuration of this documentation site. However, we can do more customizations to the Material theme so that we can add our own css file and override the HTML code that Mkdocs creates.","title":"Add the Material theme to the documentation site"},{"location":"step2/","text":"We create a GitHub repository to store our documentation site: Go to your GitHub account. Click the New button. Enter the new repository\u2019s name in the Repository name text field. Leave the Initialize this repository with a README option unselected. In a terminal change the current working directory to the documentation-site-name directory. Run the following commands: echo \"# documentation-site-name\" >> README.md git init git add README.md git commit -m \"first commit\" git remote add origin https://github.com/your-user-name/documentation-site-name.git git push -u origin master We can now use the git commands add , commit , and push to keep track of the changes to the files of our documentation site and store them.","title":"Step 2 Create a GitHub Repository"},{"location":"step3/","text":"We use use the prose linter Vale the enforce the use of a style guide. Before configuring the style that we want to use, we need to install Vale with the command brew install vale (we need to install the package manager brew ). Vale has an extension system to define the rules that you want to validate. We define this rules by creating YAML files and a configuration file .vale.ini . For this implementation, we use the Google developer documentation style guide YAML files. Go to the Vale-compatible implementation of the Google developer documentation guide repository. Download the latest release of the Google.zip file. In the terminal, change the current working directory to the documentation-site-name directory. Create the folder styles: mkdir styles Unzip the Google.zip file in the styles directory: unzip Google.zip -d styles/ Create the file .vale.ini in the documentation-site-name directory. Copy and paste the following text into the .vale.ini file: StylesPath = styles MinAlertLevel = warning [*.md] BasedOnStyles = Google To run vale on an .md file run the command vale file.md .","title":"Step 3 Add the Vale YAML Extension files"},{"location":"step4/","text":"We implement a continuous integration workflow that includes the following steps: Build the documentation site. Validate the HTML output. We use GitHub Actions to implement this workflow. Everytime we create a pull request in the documentation site GitHub repository, GitHub Actions triggers the workflow we define below. It is possible to add Vale to the continuous integration workflow. However, for this implementations we run Vale locally before we commit and push our updates to the GitHub repository of our documentation site. To create the continuous integration workflow: In the terminal, change the current working directory to the documentation-site-name directory. Create the directory documentation-site-name/.github/workflows . In the directory created in the previous step, create the file continuous-integration.yml . Copy and paste the following text into the file continuous-integration.yml: name: Continuous Integration on: [pull_request] jobs: test: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Setup Python uses: actions/setup-python@v1 with: python-version: 3.7 - name: Install dependencies and run tests run: | pip install -r requirements.txt - run: mkdocs build - name: HTMLProofer uses: chabad360/htmlproofer@v1.1 with: directory: \"./site\" arguments: --disable-external We save the file continuous-integration.yml and push our changes to the documentation site GitHub repository. In this workflow, we use Ubuntu to run the continuous integration workflow. Also, we define the tasks to build the documentation site (using the command mkdocs build ) and validate the HTML output using HTMLProofer .","title":"Step 4 Create the continuous integration workflow"},{"location":"step5/","text":"From the site dashboard, go to Settings > General > Site details > Site information, and copy the value for API ID.","title":"Step 5 Create the deployment integration workflow"}]}